#!/opt/puppetlabs/puppet/bin/ruby

require 'yaml'
require 'openssl'
require 'aws-sdk'

# Read CSR
@csr = OpenSSL::X509::Request.new(STDIN.read)

# Load AWS SDK (EC2)
def ec2
  region = ENV['AWS_DEFAULT_REGION'] || 'us-east-1'
  Aws::EC2::Resource.new(region: region)
end

# Configuration
def cfg
  YAML.load_file('/etc/puppetlabs/puppet/csr/cfg.yaml')
rescue => e
  puts "Could not load the configuration file (#{e.message})!"
  return []
end

# Get a list of custom attributes
def atts
  @csr.attributes
end

# Get challenge password
def challenge_password
  atts.select { |att| att.oid == 'challengePassword' }
      .first.value.value.first.value.strip
rescue => e
  puts "Could not find challengePassword in the attributes (#{e.message})!"
  return nil
end

# Get extensions
def exts
  atts.select { |att| att.oid == 'extReq' }
      .first.value.value.first.value
rescue => e
  puts "Could not find other extensions in the attributes! (#{e.message})!"
  return []
end

# Get instance
def instance_id
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.2'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .first
end

# Get image_name
def image_name
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.3'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .first
end

# Get project
def project
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.7'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .first
end

# Get role
def role
  exts
    .map do |ext|
      if ext.value[0].value.strip == '1.3.6.1.4.1.34380.1.1.13'
        ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip
      end
    end
    .first
end

# Get authorized password
def authorized_password
  cfg[project]['challengePassword']
rescue => e
  puts 'Could not find challengePassword in the configuration for' \
       " project '#{project}' (#{e.message})!"
  return nil
end

# Sign if password matches
def check_password
  authorized_password && challenge_password == authorized_password
end

# Sign if its a known instance
def check_instances_list
  ec2.instances.map(&:id).include?(@instance_id)
rescue => e
  puts "Could not get a list of instances (#{e.message})!"
  return false
end

# Sign if the base image is known
def check_images_list
  ec2.images(owners: ['self']).map(&:id).include?(@image_name)
rescue => e
  puts "Could not get a list of images (#{e.message})!"
  return false
end

# Authorize
def authorize(ret, msg)
  puts msg
  exit ret
end

# Authorization
if atts.empty?
  authorize 1, 'Authorization failed! The CSR has no attributes!'
elsif check_password
  authorize 0, 'Node authorized based on the provided challengePassword'
elsif check_instances_list
  authorize 0, "Node authorized based on instance id (#{instance_id})"
elsif check_images_list
  authorize 0, "Node authorized based on image id (#{image_name})"
else
  authorize 1, 'Authorization failed!'
end
