{
  "Description": "VGH Puppet v0.0.1",

  "Parameters": {
    "Version": {
      "Type": "String",
      "Description": "Version"
    },
    "EnvType": {
      "Type": "String",
      "Description": "Environment type",
      "Default": "production"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Amazon EC2 key pair"
    },
    "AssetsBucket": {
      "Type": "String",
      "Description": "The S3 bucket containing the assets"
    },
    "AMIPrefix": {
      "Type": "String",
      "Description": "The AMI Prefix"
    },
    "SSHLocations" : {
      "Type": "CommaDelimitedList",
      "Description" : "The IP address ranges that can be used to SSH to the EC2 instances"
    },
    "DBEngine": {
      "Default": "mariadb",
      "Description": "MySQL engine",
      "Type": "String",
      "AllowedValues": ["MySQL", "mariadb", "postgres"],
      "ConstraintDescription": "must select a valid database engine"
    },
    "DBName": {
      "Default": "myDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUser": {
      "NoEcho": "true",
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "SSLCertificateId": {
      "Description": "The ARN of the SSL certificate to use",
      "Type": "String"
    },
    "VPCTemplateKey": {
      "Type": "String",
      "Description": "The key of the template for the VPC nested stack"
    },
    "SGTemplateKey": {
      "Type": "String",
      "Description": "The key of the template for the SG nested stack"
    },
    "IAMTemplateKey": {
      "Type": "String",
      "Description": "The key of the template for the IAM nested stack"
    },
    "RDSTemplateKey": {
      "Type": "String",
      "Description": "The key of the template for the RDS nested stack"
    }
  },

  "Resources": {
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [{"Fn::GetAtt": ["SG", "Outputs.ELBSecurityGroup"]}],
        "Subnets": {"Fn::GetAtt": ["VPC", "Outputs.Subnets"]},
        "CrossZone": "true",
        "Listeners": [
          {"LoadBalancerPort": "443", "Protocol": "HTTPS", "InstancePort": "80", "InstanceProtocol": "HTTP", "SSLCertificateId": {"Ref": "SSLCertificateId"} }
        ],
        "HealthCheck": {
          "Target": "HTTP:51678/v1/metadata",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "6",
          "Interval": "10",
          "Timeout": "5"
        },
        "ConnectionDrainingPolicy": {"Enabled": "true", "Timeout": "60"}
      }
    },

    "Zeus": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "LaunchZeusInstance"},
        "VPCZoneIdentifier": {"Fn::GetAtt": ["VPC", "Outputs.Subnets"]},
        "MinSize": "0",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "600",
        "Cooldown": "600",
        "LoadBalancerNames": [ { "Ref": "ELB" } ],
        "TerminationPolicies" : [ "OldestInstance", "Default" ],
        "Tags": [
          {"Key": "Role", "Value": "zeus", "PropagateAtLaunch": "true"},
          {"Key": "Name", "Value": {"Fn::Join": ["-" , [{"Ref": "AWS::StackName"}, "zeus"]]}, "PropagateAtLaunch": "true"}
        ]
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "0",
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchZeusInstance": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {"Fn::GetAtt": ["AMIInfo", "Id" ]},
        "InstanceType": "t2.micro",
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [{"Fn::GetAtt": ["SG", "Outputs.InstanceSecurityGroup"]}],
        "KeyName": {"Ref": "KeyName"},
        "IamInstanceProfile": {"Fn::GetAtt": ["IAM", "Outputs.InstanceProfile"]},
        "UserData": {"Fn::Base64": {"Fn::Join": ["" , [
          "#!/usr/bin/env bash\n",
          "set -euo pipefail\n",
          "IFS=$'\\n\\t'", "\n",

          "echo 'User Data Version v", {"Ref": "Version"}, "'\n",

          "signal_exit(){\n",
          "  /usr/local/bin/cfn-signal --exit-code ${1:-0}",
          "    --resource Zeus",
          "    --stack ", {"Ref": "AWS::StackName"},
          "    --region ", {"Ref": "AWS::Region"},
          "    || true", "\n",
          "}\n",
          "trap 'signal_exit $?' EXIT INT TERM\n",

          "echo 'IN_PROGRESS' | tee /var/lib/cloud/instance/status_cfn\n",

          "mkdir -p /etc/puppetlabs/facter/facts.d\n",
          "cat << EOF > /etc/puppetlabs/facter/facts.d/aws.env\n",
          "---\n",
          "aws_ecs_cluster: ", {"Ref": "ECSCluster"}, "\n",
          "aws_assets_bucket: ", {"Ref": "AssetsBucket"}, "\n",
          "aws_rds_db_endpoint: ", {"Fn::GetAtt": ["RDS", "Outputs.DBEndpoint"]}, "\n",
          "EOF\n",

          "echo 'Update puppet master'\n",
          "/usr/local/bin/puppet_vgh_master_update\n",

          "echo 'SUCCEEDED' | tee /var/lib/cloud/instance/status_cfn"
        ]]}}
      }
    },

    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "AMIInfo": {
      "Type": "Custom::AMIInfo",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt" : ["AMIInfoFunction", "Arn"]},
        "Prefix": {"Ref": "AMIPrefix"},
        "Region": {"Ref": "AWS::Region"},
        "Owners": ["self"]
      }
    },

    "AMIInfoFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "AssetsBucket"},
          "S3Key": {"Fn::Join" : ["/", [{"Ref": "EnvType"}, "lambdas/amilookup.zip"]]}
        },
        "Role": {"Fn::GetAtt": ["IAM", "Outputs.LambdaExecutionRoleARN"]},
        "Description" : "Looks up the latest AMI ID",
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },

    "VPC": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Fn::Join" : ["/", ["https://s3.amazonaws.com", {"Ref": "AssetsBucket"}, {"Ref": "EnvType"}, "cfn", {"Ref": "VPCTemplateKey"}]]}
      }
    },

    "SG": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Fn::Join" : ["/", ["https://s3.amazonaws.com", {"Ref": "AssetsBucket"}, {"Ref": "EnvType"}, "cfn", {"Ref": "SGTemplateKey"}]]},
        "Parameters": {
          "VPCId": {"Fn::GetAtt": ["VPC", "Outputs.VPCId"]},
          "SSHLocations": {"Fn::Join" : [",", {"Ref": "SSHLocations"}]}
        }
      }
    },

    "IAM": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Fn::Join" : ["/", ["https://s3.amazonaws.com", {"Ref": "AssetsBucket"}, {"Ref": "EnvType"}, "cfn", {"Ref": "IAMTemplateKey"}]]},
        "Parameters": {
          "AssetsBucket": {"Ref": "AssetsBucket"}
        }
      }
    },

    "RDS": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Fn::Join" : ["/", ["https://s3.amazonaws.com", {"Ref": "AssetsBucket"}, {"Ref": "EnvType"}, "cfn", {"Ref": "RDSTemplateKey"}]]},
        "Parameters": {
          "EnvType": {"Ref": "EnvType"},
          "SubnetIDs": {"Fn::GetAtt": ["VPC", "Outputs.Subnets"]},
          "SecurityGroups": {"Fn::GetAtt": ["SG", "Outputs.DBSecurityGroup"]},
          "DBEngine": {"Ref": "DBEngine"},
          "DBName": {"Ref": "DBName"},
          "DBUser": {"Ref": "DBUser"},
          "DBPassword": {"Ref": "DBPassword"}
        }
      }
    }
  },

  "Outputs": {
    "LoadBalancerURL": {
      "Description": "URL - The Load Balancer Public DNS",
      "Value": {"Fn::Join": ["", ["https://", {"Fn::GetAtt": ["ELB", "DNSName"]}]]}
    },
    "ASGName": {
      "Description": "The autoscaling group name",
      "Value": {"Ref": "Zeus"}
    },
    "InstanceProfileName": {
      "Description": "The instance profile name",
      "Value": {"Fn::GetAtt": ["IAM", "Outputs.InstanceProfileName"]}
    },
    "CodeDeployServiceRoleARN": {
      "Description": "The CodeDeploy service role ARN",
      "Value": {"Fn::GetAtt": ["IAM", "Outputs.CodeDeployServiceRoleARN"]}
    },
    "DBEndpoint": {
      "Description": "The database endpoint",
      "Value": {"Fn::GetAtt": ["RDS", "Outputs.DBEndpoint"]}
    },
    "ECSCluster" : {
      "Value": {"Ref": "ECSCluster"}
    }
  }
}
