#!/usr/bin/env bash
#
# Bootstraps Puppet
#
# USAGE:
# git clone https://github.com/vladgh/puppet.git
# bash bootstrap
#
# Environment variables:
# PP_SERVER: [String] The URL of the Puppet Server. Defaults to `puppet`
# PP_ROLE: [String] Declares the role of the node as a trusted fact*
# PP_PROJECT: [String] Declares the project name as a trusted fact*
# PP_APPLICATION: [String] Declares the application name as a trusted fact*
# PP_SECRET: [String] Declares a shared secret as a trusted fact*
# PP_CERTNAME: [String] The certificate name for the agent.
# PP_COLLECTION: [String] The puppet collection (default: 'pc1')
# PP_CODENAME: [String] The distribution code name (default: `lsb_release -cs`)
# PP_AGENT_RUN: [Boolean] Whether to run puppet agent after installation or not
#               (default: true)
# PP_AGENT_CERT_REGEN: [Boolean] If `true`, the puppet services will be stopped,
#                      the certificates and catalog cache will be deleted prior
#                      to puppet run;
#                      https://docs.puppet.com/pe/latest/agent_cert_regen.html
# PP_WAITFORCERT: [INTEGER] The number of seconds between connections to server
#                 while waiting for a certificate to be signed. You can turn off
#                 waiting for certificates by specifying a time of 0 (default).
# PP_COLOR: [String] Use color or not in output (default: 'true';
#           https://docs.puppetlabs.com/puppet/latest/reference/configuration.html#color)
# ENVTYPE: [STRING] The environment (default: 'production)
#
# * Trusted facts info: https://docs.puppetlabs.com/puppet/latest/reference/lang_facts_and_builtin_vars.html#trusted-facts

# Bash strict mode
set -euo pipefail
IFS=$'\n\t'

# DEFAULTS
PP_SERVER=${PP_SERVER:-puppet}
PP_ROLE=${PP_ROLE:-none}
PP_PROJECT=${PP_PROJECT:-}
PP_APPLICATION=${PP_APPLICATION:-}
PP_SECRET=${PP_SECRET:-}
PP_CERTNAME=${PP_CERTNAME:-}
PP_COLLECTION=${PP_COLLECTION:-pc1}
PP_CODENAME=${PP_CODENAME:-}
PP_AGENT_RUN=${PP_AGENT_RUN:-true}
PP_AGENT_CERT_REGEN=${PP_AGENT_CERT_REGEN:-false}
PP_WAITFORCERT=${PP_WAITFORCERT:-0}
PP_COLOR=${PP_COLOR:-true}
ENVTYPE=${ENVTYPE:-production}

# INTERNALS
TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
CSRTMP="${TMPDIR}/csr_attributes.yaml"
PATH="/opt/puppetlabs/bin:/opt/puppetlabs/puppet/bin:/usr/local/bin:${PATH}"

# Output
e_ok()    { printf "  ✔  %s\n" "$@" ;}
e_info()  { printf "  ➜  %s\n" "$@" ;}
e_error() { printf "  ✖  %s\n" "$@" ;}
e_warn()  { printf "    %s\n" "$@" ;}
e_abort() { e_error "$1"; return "${2:-1}" ;}

# Check if command exists
is_cmd() { command -v "$@" >/dev/null 2>&1 ;}

# APT update
apt_update() { e_info 'Updating APT' && apt-get -qy update < /dev/null ;}

# APT install package
apt_install(){ e_info "Installing $*"; apt-get -qy install "$@" < /dev/null ;}

# Sanity checks
sanity_checks(){
  [[ $EUID == 0 ]] || e_abort 'This script needs to run as root'
  is_cmd lsb_release || { apt_update && e_info 'Install LSB-Release' && apt_install lsb-release ;}
  is_cmd curl || { apt_update && e_info 'Install CURL' && apt_install curl ;}
}

# Generate certificate request attributes file
generate_csr_attributes(){
  e_info 'Generating a CSR Attributes file'

  # Get EC2 info
  instance_id="$(curl --max-time 2 -s http://169.254.169.254/latest/meta-data/instance-id || echo '')"
  ami_id="$(curl --max-time 2 -s http://169.254.169.254/latest/meta-data/ami-id || echo '')"

  # Define file template
  cat > "$CSRTMP" <<CSR
custom_attributes:
  challengePassword: ${PP_SECRET}
extension_requests:
  pp_role: ${PP_ROLE}
  pp_project: ${PP_PROJECT}
  pp_application: ${PP_APPLICATION}
  pp_instance_id: ${instance_id}
  pp_image_name: ${ami_id}
CSR
}

# Move the CSR Attributes file to the right place and set permissions
install_csr_attributes(){
  e_info 'Configure the CSR Attributes file'
  if [[ -s "$CSRTMP" ]]; then
    chmod 600 "$CSRTMP"
    mv "$CSRTMP" "$PP_CONFDIR"
  fi
}

# Install Puppet release package
install_puppet_agent(){
  local deb_name deb_path apt_url
  deb_name="puppetlabs-release-${PP_COLLECTION}-${PP_CODENAME:-$(lsb_release -cs)}.deb"
  deb_path="${TMPDIR}/${deb_name}"
  apt_url='https://apt.puppetlabs.com'

  if [ ! -x /opt/puppetlabs/bin/puppet ] ; then
    e_info 'Downloading Puppet release package'
    if !  curl -sSL -o "$deb_path" "${apt_url}/${deb_name}"; then
      e_abort 'Could not download the release package'
    fi

    if [ -s "$deb_path" ]; then
      e_info 'Installing Puppet release package'
      dpkg -i "$deb_path" && rm "$deb_path"
      e_info 'Installing Puppet Agent'
      apt_update && apt_install puppet-agent
    else
      e_abort 'Could not install Puppet release package'
    fi
  else
    e_info "Puppet is already installed - version $(puppet --version)"
  fi
}

# Configure puppet server address
configure_puppet_server(){
  if [[ "$PP_SERVER" != 'puppet' ]]; then
    e_info "Set puppet server address - '$PP_SERVER'"
    puppet config set server "$PP_SERVER" --section main
  fi
}

# Configure puppet environment
configure_puppet_environment(){
  if [[ "$ENVTYPE" != 'production' ]]; then
    e_info "Set puppet environment - '$ENVTYPE'"
    mkdir -p "$PP_ENVDIR"
    puppet config set environment "$ENVTYPE" --section main
  fi
}

# Configure puppet certname
configure_puppet_certname(){
  e_info "Set puppet certname - '${PP_CERTNAME}'"
  puppet config set certname "$PP_CERTNAME" --section main
}

# Remove ssldir
remove_ssldir(){
  if [[ -d "$PP_SSLDIR" ]]; then
    e_info "Removing SSLDIR (${PP_SSLDIR})"
    rm -rf "$PP_SSLDIR"
  fi
}

# Remove cached catalogs
remove_cached_catalogs(){
  if [[ -d "$PP_CLIENT_DATADIR" ]]; then
    e_info "Removing cached catalogs (${PP_CLIENT_DATADIR})"
    find "$PP_CLIENT_DATADIR" -type f -name "*.json" -exec rm -f {} \;
  fi
}

# Stop all puppet services
stop_puppet_agent_services(){
  puppet resource service puppet ensure=stopped
  puppet resource service mcollective ensure=stopped
  puppet resource service pxp-agent ensure=stopped
}

# Configure agent or master
configure_puppet(){
  PP_CONFDIR="$(puppet config print confdir)"
  PP_ENVDIR="$(puppet config print environmentpath)/${ENVTYPE}"
  PP_CERTNAME="${PP_CERTNAME:-$(puppet config print certname)}"
  PP_CLIENT_DATADIR="$(puppet config print client_datadir)"
  PP_SSLDIR="$(puppet config print ssldir)"

  if [[ "$PP_AGENT_CERT_REGEN" == 'true' ]]; then
    stop_puppet_agent_services
    remove_ssldir
    remove_cached_catalogs
  fi

  configure_puppet_server
  configure_puppet_environment
  configure_puppet_certname
  install_csr_attributes
}

# Process the exit code
process_exit_code(){
  local exit_code="${1}"
  if [[ $exit_code == 0 ]]; then
    e_ok 'The run succeeded with no changes or failures'
  elif [[ $exit_code == 1 ]]; then
    e_abort 'The run failed'
  elif [[ $exit_code == 2 ]]; then
    e_ok 'The run succeeded, and some resources were changed'
  elif [[ $exit_code == 4 ]]; then
    e_abort 'The run succeeded, and some resources failed'
  elif [[ $exit_code == 6 ]]; then
    e_abort 'The run succeeded, and included both changes and failures'
  else
    e_abort 'Unknown run exit code'
  fi
}

# Run puppet
run_puppet(){
  local exit_code
  exit_code=0

  e_info 'Running puppet'
  puppet agent \
    --server "$PP_SERVER" \
    --environment="$ENVTYPE" \
    --onetime \
    --no-daemonize \
    --no-splay \
    --no-usecacheonfailure \
    --waitforcert "$PP_WAITFORCERT" \
    --report \
    --show_diff \
    --summarize \
    --detailed-exitcodes \
    --color="$PP_COLOR" \
    --verbose || exit_code=$?

  process_exit_code "$exit_code"
}

# Logic
main(){
  sanity_checks

  generate_csr_attributes
  install_puppet_agent
  configure_puppet

  if [[ "$PP_AGENT_RUN" == 'true' ]]; then
    run_puppet
  fi
}

# Run
main "$@"
