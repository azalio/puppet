#!/usr/bin/env bash
# GIT Pre-Commit Hook
#
# Prerequisites:
#   gem install puppet-lint puppet
#
# Install:
#  /path/to/repo/.git/hooks/pre-commit
#
# Inspired from the work of:
#  Ronny Roethof
#  Mattias Geniar <m@ttias.be>
#  Rob Nelson <rnelson0@gmail.com>

# Load environment
# shellcheck disable=1090
. "$(cd "$(dirname "${BASH_SOURCE[0]}")/../../" && pwd -P)/envrc"

# Check if command exists
is_cmd() { command -v "$@" >/dev/null 2>&1 ;}

# Check YAML
function checkyaml() {
  ruby -e "require 'yaml'; YAML.load_file('$1')"
}

# Make sure the necessary tools are installed. If they aren't, just die and
# stop the commit. Force the use of these tools before a commit is allowed.
# No commit should ever happen without a puppet-lint check.

if ! is_cmd git; then
  echo "The git binary wasn't found."
  echo "Sorry, I won't allow you to commit without git installed."
  echo "Please install git and try again."
  exit 1
fi

if ! is_cmd puppet; then
  echo "The puppet binary wasn't found."
  echo "Sorry, I won't allow you to commit without puppet installed."
  echo "Please install puppet and try again."
  exit 1
fi

if ! is_cmd puppet-lint; then
  echo "The puppet-lint binary wasn't found."
  echo "Sorry, I won't allow you to commit without puppet-lint installed."
  echo "Please install puppet-lint and try again."
  exit 1
fi

if ! is_cmd erb; then
  echo "The erb binary wasn't found. Sorry, I won't allow you to commit without erb installed."
  echo "Please install erb (Ruby Templating) and try again."
  exit 1
fi

if ! is_cmd ruby; then
  echo "The ruby binary wasn't found."
  echo "Sorry, I won't allow you to commit without ruby installed."
  echo "Please install ruby and try again."
  exit 1
fi

if ! is_cmd aws; then
  echo "The aws binary wasn't found."
  echo "Sorry, I won't allow you to commit without AWS CLI installed."
  echo "Please install AWS CLI and try again."
  exit 1
fi

if ! is_cmd shellcheck; then
  echo "The shellcheck binary wasn't found."
  echo "Sorry, I won't allow you to commit without shellcheck installed."
  echo "Please install shellcheck and try again."
  exit 1
fi

# Checks

echo "### Checking puppet syntax, for science! ###"
for file in $(git diff --name-only --cached | grep -E '\.(pp)'); do
  # Only check new/modified files that end in *.pp extension
  if [[ -f $file && $file == *.pp ]]; then
    puppet-lint \
      --no-140chars-check \
      --with-filename "$file"

    # Set us up to bail if we receive any syntax errors
    if [[ $? -ne 0 ]]; then
      syntax_is_bad=1
    else
      echo "OK: $file looks valid"
    fi
  fi
done
echo ""

echo "### Checking if puppet manifests are valid ###"
for file in $(git diff --name-only --cached | grep -E '\.(pp)'); do
  if [[ -f $file ]]; then
    puppet parser validate "$file"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: puppet parser failed at: $file"
      syntax_is_bad=1
    else
      echo "OK: $file looks valid"
    fi
  fi
done
echo ""

echo "### Checking if ruby template syntax is valid ###"
for file in $(git diff --name-only --cached | grep -E '\.(erb)'); do
  if [[ -f $file ]]; then
    erb -P -x -T '-' "$file" | ruby -c
    if [[ $? -ne 0 ]]; then
      echo "ERROR: ruby template parser failed at: $file"
      syntax_is_bad=1
    else
       echo "OK: $file looks valid"
    fi
  fi
done
echo ""

echo "### Checking if puppet template syntax is valid ###"
for file in $(git diff --name-only --cached | grep -E '\.(epp)'); do
  if [[ -f $file ]]; then
    puppet epp validate "$file"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: puppet template parser failed at: $file"
      syntax_is_bad=1
    else
       echo "OK: $file looks valid"
    fi
  fi
done
echo ""

echo "### Checking if YAML syntax is valid ###"
for file in $(git diff --name-only --cached | grep -E '\.(yaml)'); do
  if [[ -f $file ]]; then
    checkyaml "$file"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: YAML syntax validation failed at: $file"
      syntax_is_bad=1
    else
       echo "OK: $file looks valid"
    fi
  fi
done
echo ""

echo "### Checking if CloudFormation syntax is valid ###"
for file in $(git diff --name-only --cached | grep -E 'cfn\/.*\.(json)'); do
  if [[ -f $file ]]; then
    aws --region 'us-west-2' --output text \
      cloudformation validate-template \
      --template-body "file://${file}"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: Cloudformation syntax validation failed at: $file"
      syntax_is_bad=1
    else
       echo "OK: $file looks valid"
    fi
  fi
done
echo ""

echo "### Checking if bash syntax is valid ###"
for file in $(git diff --name-only --cached | grep -E '\.sh$'); do
  if [[ -f $file ]]; then
    shellcheck "$file"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: Bash syntax validation failed at: $file"
      syntax_is_bad=1
    else
       echo "OK: $file looks valid"
    fi
  fi
done
echo ""

# Report
if [[ ${syntax_is_bad:-0} -eq 1 ]]; then
  echo
  echo "################################################################"
  echo -e "### \033[31mPlease fix the errors above before committing your code.\033[0m ###"
  echo "################################################################"
  echo
  exit 1
else
  echo "Everything looks good."
fi
