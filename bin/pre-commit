#!/usr/bin/env bash
# GIT Pre-Commit Hook
#
# Prerequisites:
#   gem install puppet-lint puppet
#
# Install:
#  /path/to/repo/.git/hooks/pre-commit
#
# Inspired from the work of:
#  Ronny Roethof
#  Mattias Geniar <m@ttias.be>
#  Rob Nelson <rnelson0@gmail.com>

# Load environment
# shellcheck disable=1090
. "$(cd "$(dirname "${BASH_SOURCE[0]}")/../../" && pwd -P)/envrc"

# Check if command exists
is_cmd() { command -v "$@" >/dev/null 2>&1 ;}

# Check YAML
function checkyaml() {
  ruby -e "require 'yaml'; YAML.load_file('$1')"
}

# Make sure the necessary tools are installed. If they aren't, just die and
# stop the commit. Force the use of these tools before a commit is allowed.
# No commit should ever happen without a puppet-lint check.

is_cmd git || e_abort "The git binary wasn't found."
is_cmd puppet || e_abort "The puppet binary wasn't found."
is_cmd puppet-lint || e_abort "The puppet-lint binary wasn't found."
is_cmd erb || e_abort "The erb binary wasn't found."
is_cmd ruby || e_abort "The ruby binary wasn't found."
is_cmd r10k || e_abort "The r10k binary wasn't found."
is_cmd shellcheck || e_abort "The shellcheck binary wasn't found."

# Checks

e_info "Checking puppet syntax, for science!"
for file in $(git diff --name-only --cached | grep -E '\.pp'); do
  # Only check new/modified files that end in *.pp extension
  if [[ -f $file ]]; then
    puppet-lint \
      --no-140chars-check \
      --with-filename "$file"

    # Set us up to bail if we receive any syntax errors
    if [[ $? -ne 0 ]]; then
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

e_info "Checking if puppet manifests are valid!"
for file in $(git diff --name-only --cached | grep -E '\.pp'); do
  if [[ -f $file ]]; then
    puppet parser validate "$file"
    if [[ $? -ne 0 ]]; then
      e_error "puppet parser failed at: $file"
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

e_info "Checking if ruby template syntax is valid!"
for file in $(git diff --name-only --cached | grep -E '\.erb'); do
  if [[ -f $file ]]; then
    erb -P -x -T '-' "$file" | ruby -c
    if [[ $? -ne 0 ]]; then
      e_error "ruby template parser failed at: $file"
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

e_info "Checking if puppet template syntax is valid!"
for file in $(git diff --name-only --cached | grep -E '\.epp'); do
  if [[ -f $file ]]; then
    puppet epp validate "$file"
    if [[ $? -ne 0 ]]; then
      e_error "puppet template parser failed at: $file"
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

e_info "Checking if YAML syntax is valid!"
for file in $(git diff --name-only --cached | grep -E '\.yaml'); do
  if [[ -f $file ]]; then
    checkyaml "$file"
    if [[ $? -ne 0 ]]; then
      e_error "YAML syntax validation failed at: $file"
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

e_info "Checking if R10K Puppetfile syntax is valid!"
for file in $(git diff --name-only --cached | grep -E 'Puppetfile'); do
  if [[ -f $file ]]; then
    PUPPETFILE="$file" r10k puppetfile check
    if [[ $? -ne 0 ]]; then
      e_error "R10K Puppetfile validation failed at: $file"
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

e_info "Checking if bash syntax is valid!"
for file in $(git diff --name-only --cached | grep -E '\.sh'); do
  if [[ -f $file ]]; then
    shellcheck "$file"
    if [[ $? -ne 0 ]]; then
      e_error "Bash syntax validation failed at: $file"
      syntax_is_bad=1
    else
      e_ok "$file looks valid"
    fi
  fi
done

# Report
if [[ ${syntax_is_bad:-0} -eq 1 ]]; then
  e_abort "Please fix the errors above before committing your code"
else
  e_ok "Everything looks good."
fi
