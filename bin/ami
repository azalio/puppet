#!/usr/bin/env bash
# AWS EC2 image tasks

# Load environment
envfile="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)/../environment.sh"
# shellcheck disable=1090
[[ -s "$envfile" ]] && . "$envfile"

pack_ami_files(){
  ami_archive="ami-${VERSION}.tgz"
  ami_archive_path="${TMPDIR}/${ami_archive}"
  e_info "Creating AMI archive (${ami_archive_path})"
  if ! tar cvzf "$ami_archive_path" \
    data/ dist/profile/manifests dist/role/manifests manifests/ \
    .env bootstrap environment.sh Puppetfile \
    LICENSE README.md VERSION;
  then
    e_abort "Could not create ${ami_archive_path}"
  fi
}

upload_ami_files(){
  ami_archive_bucket="$AWS_ASSETS_BUCKET"
  ami_archive_key="${AWS_ASSETS_KEY_PREFIX}/ami/${ami_archive}"
  ami_archive_s3_path="s3://${ami_archive_bucket}/${ami_archive_key}"
  echo "Uploading AMI archive to S3 (${ami_archive_s3_path})"
  if ! aws s3 cp "$ami_archive_path" "${ami_archive_s3_path}"; then
    e_abort "Could not uplaod ${ami_archive_path} to ${ami_archive_s3_path}"
  fi
}

generate_s3_presigned_url(){
  e_info 'Generate S3 presigned URL'
  vgs_aws_s3_generate_presigned_url "$ami_archive_bucket" "$ami_archive_key" 300
}

generate_user_data(){
  local file="${TMPDIR}/${FUNCNAME[0]}"
cat <<USERDATA > $file
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Report status
echo 'IN_PROGRESS' | tee /var/lib/cloud/instance/status_ami

# VARs
export PP_ROLE=zeus
export PP_MASTER=none
export PP_ENV=${ENVTYPE:-production}
export SLACK_CHANNEL='${SLACK_CHANNEL}'
export SLACK_USER='${SLACK_USER}'
export SLACK_WEBHOOK='${SLACK_WEBHOOK}'
export ami_archive_s3_path='${ami_archive_s3_path}'
export ami_archive='${ami_archive}'
export ami_archive_s3_url='$(generate_s3_presigned_url)'
export HOME=/home/ubuntu
export PATH="/opt/puppetlabs/bin:/opt/puppetlabs/puppet/bin:/usr/local/bin:\${PATH}"
export BUILDDIR; BUILDDIR="/tmp/ami_build_\$(date +%Y%m%d)"
export DEBIAN_FRONTEND=noninteractive

# Trap exit
notify_slack(){
  local exit_code date title color text
  exit_code=\${1:-0}
  date=\$(TZ=US/Central date)
  if [[ \$exit_code == 0 ]]; then
    title='SUCCESS'
    color='#00FF00'
  else
    title='FAILED'
    color='#ff0000'
  fi
  text="AMI Bootstrap exited with \${exit_code} on \$(hostname) @ \${date}"
  curl -s -X POST --data-urlencode "payload={\"channel\": \"#\${SLACK_CHANNEL}\", \"username\": \"\${SLACK_USER}\", \"icon_emoji\": \":taurus:\", \"attachments\": [{\"title\": \"\${title}\", \"text\": \"\${text}\", \"color\": \"\${color}\"}]}" "\$SLACK_WEBHOOK"
  echo; echo "\$title: \$text"; exit "\$exit_code"
}
trap 'notify_slack \$?' EXIT INT TERM

echo 'Upgrading system'
apt-get -qy update < /dev/null && apt-get -qy upgrade < /dev/null

echo 'Ensure Python PIP exists'
command -v pip >/dev/null 2>&1 || apt-get -qy install python-pip < /dev/null

echo 'Upgrade PIP and ensure AWS-CLI exists'
# Fix https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1306991
pip install --upgrade pip setuptools awscli

echo 'Install VGS Library'
mkdir -p /opt/vgs
curl https://s3.amazonaws.com/vghn/vgs.tgz | tar xvz -C /opt/vgs

echo 'Create build directory'
mkdir -p "\${BUILDDIR}"
cd "\${BUILDDIR}" || exit

echo 'Get AMI build files'
curl "\$ami_archive_s3_url" | tar xvz

echo 'Bootstrap Puppet'
bash bootstrap

# Report status
echo 'SUCCEEDED' | tee /var/lib/cloud/instance/status_ami

echo 'Power Off AMI'
poweroff
USERDATA

  echo "$file"
}

create_instance(){
  e_info 'Creating EC2 instance'
  instance_id=$(vgs_aws_ec2_create_instance \
    "$AWS_EC2_KEY" \
    "$AWS_EC2_INSTANCE_TYPE" \
    "$(generate_user_data)")
  e_ok "  ... ${instance_id}"
}

tag_instance(){
  vgs_aws_ec2_create_tags "$instance_id" \
    Key=Group,Value="$AWS_TAG_GROUP" \
    Key=Name,Value="$AWS_EC2_IMAGE_PREFIX"
}

create_image(){
  e_info "Creating image from ${instance_id}"
  image_id=$(vgs_aws_ec2_image_create \
    "$instance_id" \
    "$AWS_EC2_IMAGE_PREFIX" \
    "$AWS_EC2_IMAGE_DESCRIPTION")
  e_ok "  ... ${image_id}"
}

tag_image(){
  vgs_aws_ec2_create_tags "$image_id" \
    Key=Group,Value="$AWS_TAG_GROUP" \
    Key=Name,Value="$AWS_EC2_IMAGE_PREFIX" \
    Key=Version,Value="$VERSION"
}

clean_up(){
  e_info 'Terminating instances'
  aws ec2 terminate-instances \
    --instance-ids "$instance_id" \
    --output text \
    --query 'TerminatingInstances[*].InstanceId'
  e_ok "  ... ${instance_id}"
}

create_ami(){
  pack_ami_files && upload_ami_files

  create_instance && tag_instance
  e_info 'Waiting for instance to start'
  aws ec2 wait instance-running --instance-ids "$instance_id"
  e_info 'Waiting for instance to bootstrap and power off'
  aws ec2 wait instance-stopped --instance-ids "$instance_id" || \
    ( clean_up; e_abort 'Could not create image')

  create_image && tag_image
  e_info 'Waiting for image to be available'
  aws ec2 wait image-available --image-ids "$image_id"

  clean_up
}

# xVARs
e_header 'INFO:'
e_info "Application directory: ${APPDIR:?}"
e_info "Project directory: ${PROJECT_PATH:?}"
e_info "Project name: ${PROJECT_NAME:?}"
e_info "Temporary directory: ${TMPDIR:?}"
e_info "Slack channel: ${SLACK_CHANNEL:?}"
e_info "Slack user: ${SLACK_USER:?}"
e_info "Slack webhook: ${SLACK_WEBHOOK:?}"
e_info "Environment: ${ENVTYPE:?}"
e_info "Version: ${VERSION:?}"
e_info "Group: ${AWS_TAG_GROUP:?}"
e_info "AWS EC2 key: ${AWS_EC2_KEY:?}"
e_info "AWS EC2 instance type: ${AWS_EC2_INSTANCE_TYPE:?}"
e_info "AWS EC2 image prefix: ${AWS_EC2_IMAGE_PREFIX:?}"
e_info "AWS EC2 image description: ${AWS_EC2_IMAGE_DESCRIPTION:?}"
e_info "AWS CloudFormation stack name: ${CFN_STACK_NAME:?}"
ec2_instance_profile_name="$(vgs_aws_cfn_get_output "$CFN_STACK_NAME" InstanceProfileName)"
e_info "AWS EC2 instance profile name: ${ec2_instance_profile_name}"

# Process arguments
e_header 'AWS Image:'
case "${1:-}" in
  create)
    create_ami
    ;;
  purge)
    vgs_aws_ec2_images_purge "${AWS_EC2_IMAGE_PREFIX}_*"
    ;;
  *)
    e_abort "USAGE: ${BASH_SOURCE[0]} [create | purge]"
    ;;
esac
