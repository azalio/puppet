#!/usr/bin/env bash
# AWS EC2 image tasks

# Load environment
# shellcheck disable=1090
. "$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd -P)/env.sh"

generate_user_data(){
  local file="${TMPDIR}/${FUNCNAME[0]}"
cat <<USERDATA > $file
#!/usr/bin/env bash
set -euo pipefail
IFS=\$'\\n\\t'

# Report status
echo 'IN_PROGRESS' | tee /var/lib/cloud/instance/status_ami

# VARs
export PP_ROLE=zeus
export PP_MASTER=none
export PP_PROJECT=${PROJECT_NAME}
export ENVTYPE=${ENVTYPE}
export BUILD_DIR="${TMPDIR}/ami_build"
export APP_S3_URL='$(vgs_aws_s3_generate_presigned_url "$AWS_ASSETS_BUCKET" "$APP_ARCHIVE_S3_KEY_LATEST" 300)'
export HOME=/root

echo 'Install VGS Library'
if [[ -d /opt/vgs ]]; then rm -fr /opt/vgs; fi
mkdir -p /opt/vgs
curl https://s3.amazonaws.com/vghn/vgs.tgz | tar xvz -C /opt/vgs

echo 'Create project directory'
mkdir -p "\$BUILD_DIR" && cd "\$BUILD_DIR"

echo 'Get AMI build files'
curl -sSL "\$APP_S3_URL" | tar xvz

echo 'Bootstrap Puppet'
bash bin/bootstrap

echo 'Run tests inside rvm if present'
( set +u; source /etc/profile && bundle install && bundle exec rake spec )

# Report status
echo 'SUCCEEDED' | tee /var/lib/cloud/instance/status_ami

echo 'Power Off AMI'
poweroff
USERDATA

  echo "$file"
}

create_instance(){
  e_info 'Creating EC2 instance'
  instance_id=$(vgs_aws_ec2_create_instance \
    "$AWS_EC2_KEY" \
    "$AWS_EC2_INSTANCE_TYPE" \
    "$(generate_user_data)")
  e_ok "  ... ${instance_id}"
}

tag_instance(){
  vgs_aws_ec2_create_tags "$instance_id" \
    Key=Group,Value="$AWS_TAG_GROUP" \
    Key=Name,Value="$AWS_EC2_IMAGE_PREFIX"
}

create_image(){
  e_info "Creating image from ${instance_id}"
  image_id=$(vgs_aws_ec2_image_create \
    "$instance_id" \
    "$AWS_EC2_IMAGE_PREFIX" \
    "$AWS_EC2_IMAGE_DESCRIPTION")
  e_ok "  ... ${image_id}"
}

tag_image(){
  vgs_aws_ec2_create_tags "$image_id" \
    Key=Group,Value="$AWS_TAG_GROUP" \
    Key=Name,Value="$AWS_EC2_IMAGE_PREFIX" \
    Key=Version,Value="$VERSION"
}

clean_up(){
  e_info 'Terminating instances'
  aws ec2 terminate-instances \
    --instance-ids "$instance_id" \
    --output text \
    --query 'TerminatingInstances[*].InstanceId'
  e_ok "  ... ${instance_id}"
}

create_ami(){
  create_instance && tag_instance
  e_info 'Waiting for instance to start'
  aws ec2 wait instance-running --instance-ids "$instance_id"
  e_info 'Waiting for instance to bootstrap and power off'
  aws ec2 wait instance-stopped --instance-ids "$instance_id" || \
    ( clean_up; e_abort 'Could not create image')

  create_image && tag_image
  e_info 'Waiting for image to be available'
  aws ec2 wait image-available --image-ids "$image_id"

  clean_up
}

# xVARs
e_header 'INFO:'
e_info "Application directory: ${APPDIR:?}"
e_info "Environment: ${ENVTYPE:?}"
e_info "Project name: ${PROJECT_NAME:?}"
e_info "Version: ${VERSION:?}"
e_info "Group: ${AWS_TAG_GROUP:?}"
e_info "AWS EC2 key: ${AWS_EC2_KEY:?}"
e_info "AWS EC2 instance type: ${AWS_EC2_INSTANCE_TYPE:?}"
e_info "AWS EC2 image prefix: ${AWS_EC2_IMAGE_PREFIX:?}"
e_info "AWS EC2 image description: ${AWS_EC2_IMAGE_DESCRIPTION:?}"
e_info "AWS S3 Assets bucket: ${AWS_ASSETS_BUCKET:?}"
e_info "AWS S3 latest app archive key: ${APP_ARCHIVE_S3_KEY_LATEST:?}"
e_info "Temporary directory: ${TMPDIR:?}"

# Process arguments
e_header 'AWS Image:'
case "${1:-}" in
  create)
    create_ami
    ;;
  purge)
    vgs_aws_ec2_images_purge "${AWS_EC2_IMAGE_PREFIX}_*"
    ;;
  *)
    e_abort "USAGE: ${BASH_SOURCE[0]} [create | purge]"
    ;;
esac
