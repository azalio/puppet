#!/usr/bin/env bash
#
# Bootstraps puppet
#
# USAGE:
# git clone https://github.com/vladgh/puppet.git
# bash puppet/bootstrap
#
# Environment variables:
# ENVTYPE: [STRING] The environment (default: 'production)
#
# PP_MASTER: [String] Can be any of the following
#   - `puppet`: (default) the address of the puppet master server
#   - `none`: runs in master-less mode, considering this a control repo; it looks
#             for a `Puppetfile` (which will install into the default modules/
#             directory), for a `datadir` containing hiera data (see the function
#             `configure_hiera` bellow for a hierarchy of files), for a `dist`
#             directory containing the profile and role modules, and for a
#             `manifests` directory containing the `site.pp` file.
#   - This value can also be any other string, in which case the address of the
#     will assume that value.
#
# PP_ROLE: [String] Declares the role of the node as a trusted fact*
#
# PP_PROJECT: [String] Declares the project name as a trusted fact*
#
# PP_SECRET: [String] Declares a shared secret as a trusted fact*
#
# PP_HIERA_S3_PATH: [String] Declares an S3 Path to private hiera data.
#                   Ex: `s3://mybucket/myprefix`
#
# PP_COLLECTION: [String] The puppet collection (default: 'pc3')
#
# PP_CODENAME: [String] The distribution codename (default: `lsb_release -cs`)
#
# PP_CONTROL_REPO: [String] The url of the control repo (default:
#                  `https://github.com/vghn/puppet.git`)
#
# PP_COLOR: [String] Use color or not in output (default: 'true';
#           https://docs.puppetlabs.com/puppet/latest/reference/configuration.html#color)
#
# PP_AGENT_CERTNAME: [String] The certificate name for the agent. Can be any of:
#   - `default`: The certname will be the hostname (default on non-ec2 agents)
#   - `ec2`: The certname will be the AWS EC2 Instance ID (default on
#                    AWS agents)
#   - This value can also be any other string, in which case the certname will
#     assume that value.
#
# * Trusted facts info: https://docs.puppetlabs.com/puppet/latest/reference/lang_facts_and_builtin_vars.html#trusted-facts

# Install/Update VGS Library
ensure_vgs(){
  echo 'Install/Update VGS Library'
  local installdir
  if [[ $EUID == 0 ]]; then installdir=/opt/vgs; else installdir=~/vgs; fi

  if ! command -v curl >/dev/null 2>&1; then
    echo 'Installing curl'
    apt-get -qy install curl < /dev/null
  fi

  echo 'Remove any existing installations'
  if [[ -d "$installdir" ]]; then rm -fr "$installdir"; fi
  mkdir -p "$installdir"

  echo 'Downloading VGS library'
  curl -sSL https://s3.amazonaws.com/vghn/vgs.tgz | tar xvz -C "$installdir"
}

# Load environment
# shellcheck disable=1090
ensure_vgs && . "$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd -P)/env.sh"

# DEFAULTS
ENVTYPE=${ENVTYPE:-production}
PP_MASTER=${PP_MASTER:-puppet}
PP_ROLE=${PP_ROLE:-}
PP_PROJECT=${PP_PROJECT:-}
PP_SECRET=${PP_SECRET:-}
PP_COLLECTION=${PP_COLLECTION:-pc1}
PP_COLOR=${PP_COLOR:-true}
PP_CONTROL_REPO=${PP_CONTROL_REPO:-'https://github.com/vghn/puppet.git'}
PP_AGENT_CERTNAME=${PP_AGENT_CERTNAME:-default}
PP_HIERA_S3_PATH=${PP_HIERA_S3_PATH:-}
PP_CA_S3_PATH=${PP_CA_S3_PATH:-}
SLACK_CHANNEL=${SLACK_CHANNEL:-}
SLACK_USER=${SLACK_USER:-}
SLACK_WEBHOOK=${SLACK_WEBHOOK:-}

# INTERNALS
TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
CSRFILE="${TMPDIR}/csr_attributes.yaml"
LOCALDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd -P)"
PATH="/opt/puppetlabs/bin:/opt/puppetlabs/puppet/bin:/usr/local/bin:${PATH}"

# Facts
export FACTER_ROLE="${PP_ROLE}"
export FACTER_PROJECT="${PP_PROJECT}"
export FACTER_CA_S3_PATH="${PP_CA_S3_PATH}"

# Trap exit and notify Slack
notify_slack(){
  local exit_code date title color text
  exit_code=${1:-0}
  date=$(TZ=US/Central date)

  if [[ $exit_code == 0 ]]; then
    title='SUCCESS'
    color='#00FF00'
  else
    title='FAILED'
    color='#ff0000'
  fi
  text="Bootstrap exited with ${exit_code} on $(hostname) @ ${date}"

  if [[ -n "$SLACK_CHANNEL" ]] && \
    [[ -n "$SLACK_USER" ]] && \
    [[ -n "$SLACK_WEBHOOK" ]]
  then
    curl -s -X POST --data-urlencode "payload={\"channel\": \"#${SLACK_CHANNEL}\", \"username\": \"${SLACK_USER}\", \"icon_emoji\": \":taurus:\", \"attachments\": [{\"title\": \"${title}\", \"text\": \"${text}\", \"color\": \"${color}\"}]}" "${SLACK_WEBHOOK}"
  fi

  echo; echo "$title: $text"; exit "$exit_code"
}
trap 'notify_slack $?' EXIT TERM INT

# Sanity checks
sanity_checks(){
  is_root || e_abort 'This script needs to run as root'
}

# Check if the instance is launching as an image
is_ami(){
  [[ "$(cat /var/lib/cloud/instance/status_ami 2>/dev/null)" == 'IN_PROGRESS' ]]
}

# Check if the instance is launching as part of an auto-scaling group
is_asg(){
  [[ "$(cat /var/lib/cloud/instance/status_cfn 2>/dev/null)" == 'IN_PROGRESS' ]]
}

# Install Python PIP and awscli
ensure_pip(){
  e_info 'Ensure Python PIP exists'
  is_cmd pip || apt-get -qy install python-pip < /dev/null
  # Fix https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1306991
  pip install --upgrade pip setuptools
}

# Install AWS-CLI
ensure_awscli(){
  e_info 'Ensure AWS-CLI exists'
  pip install --upgrade awscli
}

# Generate certificate request attributes file
generate_csr_attributes(){
  e_info 'Generating a CSR Attributes file'

  # Get EC2 info
  instance_id="$(curl --max-time 2 -s http://169.254.169.254/latest/meta-data/instance-id || echo '')"
  ami_id="$(curl --max-time 2 -s http://169.254.169.254/latest/meta-data/ami-id || echo '')"

  # Define file template
  cat > "$CSRFILE" <<CSR
custom_attributes:
  challengePassword: $PP_SECRET
extension_requests:
  pp_role: $PP_ROLE
  pp_project: $PP_PROJECT
  pp_instance_id: $instance_id
  pp_image_name: $ami_id
CSR
}

# Install Puppet release package
install_puppet_agent(){
  local deb_name deb_path apt_url
  PP_CODENAME=${PP_CODENAME:-$(get_dist)}
  deb_name="puppetlabs-release-${PP_COLLECTION}-${PP_CODENAME}.deb"
  deb_path="${TMPDIR}/${deb_name}"
  apt_url='https://apt.puppetlabs.com'

  if [ ! -x /opt/puppetlabs/bin/puppet ] ; then
    e_info 'Downloading Puppet release package'
    if !  curl -sSL -o "$deb_path" "${apt_url}/${deb_name}"; then "$installdir"
      e_abort 'Could not download the release package'
    fi

    if [ -s "$deb_path" ]; then
      e_info 'Installing Puppet release package'
      dpkg -i "$deb_path" && rm "$deb_path"
      apt_update && apt_install puppet-agent
    else
      e_abort 'Could not install Puppet release package'
    fi
  else
    e_warn "Puppet is already installed - version $(puppet --version)"
  fi
}

# Configure puppet master
deploy_r10k(){
  if ! is_cmd r10k; then
    e_info 'Install R10K gem'
    puppet resource package r10k ensure=latest provider=puppet_gem
  fi

  if ! is_cmd git; then
    e_info 'Install git'
    puppet resource package git ensure=latest
  fi

  if [[ -s /etc/puppetlabs/r10k/r10k.yaml ]]; then
    e_info 'Deploy R10K'
    r10k deploy environment --puppetfile --verbose
  elif [[ -s "${LOCALDIR}/Puppetfile" ]]; then
    e_info 'Install R10K Puppetfile'
    r10k puppetfile install --verbose
  else
    e_warn 'No R10K environment or Puppetfile found!'
  fi
}

# Retrieve Hiera Data
get_hiera_data(){
  local name
  for env in ${PP_ENVDIR}/*; do
    name=$(basename "$env")

    e_info "Sync hiera data for the '${name}' environment"
    if ! aws s3 sync \
      --delete \
      "$PP_HIERA_S3_PATH" \
      "${PP_ENVDIR}/${name}/hieradata"
    then
      e_warn 'Could not get hiera data'
    fi
  done
}

configure_hiera(){
  [[ -s "${LOCALDIR}/hieradata" ]] || return
  local hiera_config="${PP_CODEDIR}/hiera.yaml"
  if [[ "$(sed -n '1p' "$hiera_config" 2>/dev/null)" != '# managed by puppet' ]]; then
    e_info 'Configure Hiera'
    cat <<HIERACFG > "$hiera_config"
---
:backends:
  - yaml
:yaml:
  :datadir: '${LOCALDIR}/hieradata'
:hierarchy:
  - "nodes/%{::trusted.certname}"
  - "%{::trusted.domainname}/%{::trusted.hostname}"
  - "roles/%{::trusted.extensions.pp_role}"
  - "roles/%{::role}"
  - "projects/%{::trusted.extensions.pp_project}"
  - "projects/%{::project}"
  - "virtual/%{::virtual}"
  - "osfamily/%{::osfamily}"
  - private
  - common
HIERACFG
  fi
  if [[ -n "$PP_HIERA_S3_PATH" ]]; then
    get_hiera_data;
  fi
}

# Configure puppet
configure_puppet_agent(){
  e_info "Set puppet master address - '$PP_MASTER'"
  puppet config set server "$PP_MASTER" --section agent

  e_info "Set puppet environment - '$ENVTYPE'"
  puppet config set environment "$ENVTYPE" --section agent

  e_info "Set puppet certname - '$PP_AGENT_CERTNAME'"
  case "$PP_AGENT_CERTNAME" in
    default )
      e_info 'Leaving the default certname'
      ;;
    ec2 )
      if [[ "$instance_id" =~ ^i-.* ]]; then
        puppet config set certname "$instance_id" --section agent
      else
        e_abort 'The EC2 Instance ID is not correct'
      fi
      ;;
    * )
      puppet config set certname "$PP_AGENT_CERTNAME" --section agent
      ;;
  esac

  e_info 'Move the CSR Attributes file to the right place and set permissions'
  if [[ -s "$CSRFILE" ]]; then
    chmod 600 "$CSRFILE"
    mv "$CSRFILE" "$PP_CONFDIR"
  fi
}

# Configure agent or master
configure_puppet(){
  PP_CONFDIR="$(puppet config print confdir)"
  PP_CODEDIR="$(puppet config print codedir)"
  PP_ENVDIR="$(puppet config print environmentpath)"

  if [[ "$PP_MASTER" == 'none' ]]; then
    deploy_r10k
    configure_hiera
  elif [[ -n "$PP_MASTER" ]]; then
    configure_puppet_agent
  fi
}

# Apply puppet
apply_puppet(){
  local exit_code manifest modulepath

  exit_code=0

  if [[ -s "${LOCALDIR}/manifests/site.pp" ]]; then
    manifest="${LOCALDIR}/manifests/site.pp"
  elif [[ -s "${PP_ENVDIR}/${ENVTYPE}/manifests/site.pp" ]]; then
    manifest="${PP_ENVDIR}/${ENVTYPE}/manifests/site.pp"
  else
    e_abort 'Could not find site.pp'
  fi

  if [[ -d "${LOCALDIR}/modules" ]] &&  [[ -d "${LOCALDIR}/dist" ]]; then
    modulepath="${LOCALDIR}/modules:${LOCALDIR}/dist"
  elif [[ -s "${PP_ENVDIR}/${ENVTYPE}/modules" ]] && [[ -s "${PP_ENVDIR}/${ENVTYPE}/dist" ]]; then
    modulepath="${PP_ENVDIR}/${ENVTYPE}/modules:${PP_ENVDIR}/${ENVTYPE}/dist"
  else
    e_abort 'Could not create modulepath'
  fi

  e_info 'Applying puppet'
  puppet apply \
  --verbose \
  --report \
  --show_diff \
  --summarize \
  --detailed-exitcodes \
  --color="$PP_COLOR" \
  --modulepath "$modulepath" \
  "$manifest" || exit_code=$?

  # Process the exit code
  if [[ $exit_code == 0 ]]; then
    e_info 'The run succeeded with no changes or failures'
  elif [[ $exit_code == 1 ]]; then
    e_abort 'The run failed'
  elif [[ $exit_code == 2 ]]; then
    e_info 'The run succeeded, and some resources were changed'
  elif [[ $exit_code == 4 ]]; then
    e_abort 'The run succeeded, and some resources failed'
  elif [[ $exit_code == 6 ]]; then
    e_abort 'The run succeeded, and included both changes and failures'
  else
    e_abort 'Unknown run exit code'
  fi
}

# Run puppet
run_puppet(){
  e_info 'Running puppet'
  puppet agent \
    --server "$PP_MASTER" \
    --environment="$ENVTYPE" \
    --waitforcert 10 \
    --no-daemonize \
    --onetime \
    --color="$PP_COLOR" \
    --verbose
}

# Logic
main(){
  sanity_checks

  if is_ami; then
    apt_upgrade
    ensure_pip
    ensure_awscli
  else
    # Disable RVM
    if [[ $(type rvm 2>/dev/null | head -1) =~ 'rvm is ' ]]; then
      if ! __rvm_unload 2>/dev/null; then
        unset GEM_HOME GEM_PATH
      fi
    fi
  fi

  if [[ "$PP_MASTER" != 'none' ]]; then generate_csr_attributes; fi

  install_puppet_agent
  configure_puppet

  if [[ "$PP_MASTER" == 'none' ]]; then
    apply_puppet
  elif [[ -n "$PP_MASTER" ]]; then
    run_puppet
  else
    e_warn 'No puppet master specified'
  fi
}

# Run
main "$@"
