#!/usr/bin/env bash
# Continuous Integration / Continuous Deployment tasks

# CI Pre-Load Steps
ci_pre_load(){
  # Load environment
  # shellcheck disable=1090
  . "$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd -P)/env.sh"

  # Check if CI
  if [[ "$CI" == 'false' ]]; then return; fi

  # Check if already installed
  if [[ $(cat /tmp/status_ci 2>&1) == 'INSTALLED' ]]; then return; fi

  # If not install essentials
  echo 'Install VGS Library'
  if [[ -d ~/vgs ]]; then rm -fr ~/vgs; fi
  mkdir -p ~/vgs
  curl https://s3.amazonaws.com/vghn/vgs.tgz | tar xvz -C ~/vgs

  echo 'Ensure latest Python PIP and AWS-CLI'
  pip install --user --upgrade pip awscli

  echo 'Sync hiera data'
  aws s3 sync --delete "$PP_HIERA_S3_PATH" "${APPDIR}/hieradata" || true

  # Re-Load environment
  # shellcheck disable=1090
  . "$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd -P)/env.sh"

  # Report status
  echo 'INSTALLED' | tee /tmp/status_ci
}

# CI Install
ci_install(){
  cd "${APPDIR}/dist/profile" || return 1
  export BUNDLE_GEMFILE=$PWD/Gemfile
  e_info 'Install required testing gems'
  bundle install --without development system_tests --path vendor

  e_info 'Install required puppet module'
  bundle exec rake spec_prep
}

# CI Test
ci_test(){
  bash -c "${APPDIR}/bin/cfn validate"

  e_info 'Running tests'
  cd "${APPDIR}/dist/profile" || return 1
  export BUNDLE_GEMFILE=$PWD/Gemfile
  bundle exec rake test
}

# EC2 Run Command
send_ec2_run_command(){
  local role
  role=${1:?}

  e_info "Looking for instances tagged ${role}"
  ids=$(aws ec2 describe-instances \
    --filter Name=tag:Role,Values="$role" Name=instance-state-name,Values=running \
    --query 'Reservations[].Instances[].InstanceId' \
    --output text)
  if [[ -n "$ids" ]]; then
    e_info "Found ids: ${ids}, for group ${role}"
  else
    e_warn 'Did not find any instances!'; return
  fi

  e_info "Sending ec2 run command"
  # shellcheck disable=2086
  command_id=$(aws ssm send-command \
    --document-name "AWS-RunShellScript" \
    --instance-ids $ids \
    --parameters $'{"commands":["/opt/puppetlabs/puppet/bin/r10k deploy environment --puppetfile --verbose"]}' \
    --comment "Deploy R10K environment" \
    --timeout-seconds 600 \
    --query 'Command.CommandId' \
    --output text)

  if [[ -n "$command_id" ]]; then
    e_info "Wait until at least 1 invocation returns succes(id: $command_id)"
    until [[ $(aws ssm list-commands --region us-east-1 --command-id "$command_id" --query 'Commands[].Status' --output text) =~ 'Success' ]]; do sleep 1; done
    e_info 'Done'
  else
    e_abort 'Could not send command'
  fi
}

# CI Deploy
ci_deploy(){
  if [[ ${PR} == false ]]; then
    bash -c "${APPDIR}/bin/cfn upload"
    bash -c "${APPDIR}/bin/lambda upload"
    bash -c "${APPDIR}/bin/app upload"
    send_ec2_run_command "$AWS_TAG_ROLE"
  else
    echo 'Deployment is not allowed from pull requests' >&2
  fi
}

# Pre-load steps
ci_pre_load

# xVARs
e_header 'Info:'
e_info "Application directory: ${APPDIR:?}"
e_info "AWS Role Tag: ${AWS_TAG_ROLE:?}"
e_info "Pull request: ${PR:?}"

# Process arguments
e_header 'CI:'
case "${1:-}" in
  install)
    ci_install
    ;;
  test)
    ci_test
    ;;
  deploy)
    ci_deploy
    ;;
  *)
    e_abort "USAGE: ${BASH_SOURCE[0]} [install | test | deploy]"
    ;;
esac
