#!/opt/puppetlabs/puppet/bin/ruby

require 'yaml'
require 'openssl'
require 'aws-sdk'
require 'logger'

# Log
logger = Logger.new('<%= @csr_log %>')

# Configuration
cfg = YAML.load_file('<%= @csr_config %>')

# Load AWS SDK
ec2 = Aws::EC2::Resource.new(region: 'us-east-1')

# VARs
secret, instance_id, image_name, project, role = nil

# Read CSR
csr = OpenSSL::X509::Request.new(STDIN.read)

# Get a list of custom attributes
atts = csr.attributes

# Do not sign if there aren't any custom csr attributes
if atts.empty?
  logger.warn 'The CSR has no attributes'
  exit 1
end

# Get secret password
pp_secret = atts.select { |att| att.oid == "challengePassword" }
            .first.value.value.first.value.strip rescue nil

# Get extension requests
exts = atts.select { |att| att.oid == "extReq" }
       .first.value.value.first.value

# Read each extension request
exts.each {|ext|
  id   = ext.value[0].value.strip
  resp = ext.value[1].value.gsub(/([\x00-\x1f])/, '').strip

  instance_id = resp if id == "1.3.6.1.4.1.34380.1.1.2"
  image_name = resp  if id == "1.3.6.1.4.1.34380.1.1.3"
  project = resp     if id == "1.3.6.1.4.1.34380.1.1.7"
  role = resp        if id == "1.3.6.1.4.1.34380.1.1.13"
}

# Sign if password matches
authorized_secret = cfg['CA'][project]['challengePassword'] rescue nil
if (pp_secret == authorized_secret && !authorized_secret.nil?)
  logger.info 'Node authorized based on the provided secret'
  exit 0
end

# Sign if its a known instance
instances_pool = ec2.instances.map(&:id)
if instances_pool.include?(instance_id)
  logger.info 'Node authorized based on instance id'
  exit 0
end

# Sign if the base image is known
ami_pool = ec2.images(owners: ['self']).map(&:id)
if ami_pool.include?(image_name)
  logger.info 'Node authorized based on image id'
  exit 0
end

# JUST DON'T
exit 1
